import { Documentazione } from './documentazione.component';

export const DLXDocumentazione: Documentazione[] = [
    {name: 'ADD',    type: 'R', syntax: 'ADD rd, rs1, rs2',         description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) + ( rs<sub>2</sub> )</center><br/>The contents of GPR rs<sub>1</sub> and the contents of GPR rs<sub>2</sub> are arithmetically added to form a 32-bit two's complement result, which is then placed into GPR rd. An overflow exception occurs when the result of the addition operation is greater than 2<sup>31</sup> - 1 (i.e., > 0x7FFFFFFF)."},
    {name: 'ADDI',   type: 'I', syntax: 'ADDI rd, rs1, immediate',  description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) + [ ( immediate<sub>0</sub> )<sup>16</sup> || immediate ]</center><br/>The 16-bit immediate is sign-extended arithmetically added to the contents of GPR rs<sub>1</sub> to form a 32-bit two's complement result, which is then placed into GPR rd. An overflow exception occurs when the result of the addition operation is greater than 2<sup>31</sup> - 1 (i.e., > 0x7FFFFFFF)."},
    {name: 'ADDU',   type: 'R', syntax: 'ADDU rd, rs1, rs2',        description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) + ( rs<sub>2</sub> )</center><br/>The contents of GPR rs<sub>1</sub> and the contents of GPR rs<sub>2</sub> are arithmetically added to form a 32-bit unsigned result, which is then placed into GPR rd. No overflow exception occurs under any circumstance. As a result, this is the only difference between this instruction and the ADD instruction."},
    {name: 'ADDUI',  type: 'I', syntax: 'ADDUI rd, rs1, immediate', description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) + ( '0'<sup>16</sup> || immediate )</center><br/>The 16-bit immediate is zero-extended arithmetically added to the contents of GPR rs<sub>1</sub> to form a 32-bit two's complement result, which is then placed into GPR rd. As a result, this is the only difference between this instruction and the ADD instruction."},
    {name: 'AND',    type: 'R', syntax: 'AND rd, rs1, rs2',         description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) &amp; ( rs<sub>2</sub> )</center><br/>The contents of GPR rs<sub>1</sub> are combined with the contents of GPR rs<sub>2</sub> in a bitwise logical AND operation, and the result is placed into GPR rd."},
    {name: 'ANDI',   type: 'I', syntax: 'ANDI rd, rs1, immediate',  description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) &amp; ( '0'<sup>16</sup> || immediate )</center><br/>The 16-bit immediate is zero-extended and combined with the contents of GPR rs<sub>1</sub> in a bitwise logical AND operation, and the result is placed into GPR rd."},
    {name: 'BEQZ',   type: 'I', syntax: 'BEQZ rs1, name',           description: "<center>if ( rs<sub>1</sub> ) = 0 then<br/>PC &larr;<sub>32</sub> {[ (PC) + 4 ] + [ ( name<sub>0</sub> )<sup>16</sup> || name ]}</center><br/>The 16-bit is sign-extended and added to the address of the instruction in the delay slot to form a 32-bit branch target address. If the contents of GPR rs<sub>1</sub> are equal to zero, then this branch target address is placed into the program counter."},
    {name: 'BNEZ',   type: 'I', syntax: 'BNEZ rs1, name',           description: "<center>if ( rs<sub>1</sub> ) &ne; 0 then<br/>PC &larr;<sub>32</sub> {[ (PC) + 4 ] + [ ( name<sub>0</sub> )<sup>16</sup> || name ]}</center><br/>The 16-bit is sign-extended and added to the address of the instruction in the delay slot to form a 32-bit branch target address. If the contents of GPR rs<sub>1</sub> are not equal to zero, then this branch target address is placed into the program counter."},
    {name: 'DIV',    type: 'R', syntax: 'DIV rd, rs1, rs2',         description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) &divide; ( rs<sub>2</sub> )</center><br/>The contents of GPR rs<sub>1</sub> and the contents of GPR rs<sub>2</sub> are arithmetically divided to form a 32-bit two's complement result, which is then placed into GPR rd."},
    {name: 'DIVI',   type: 'I', syntax: 'DIVI rd, rs1, immediate',  description: "<center>rd &larr;<sub>32</sub> ( rs<sub>1</sub> ) &divide; [ ( immediate<sub>0</sub> )<sup>16</sup> || immediate ]</center><br/>The 16-bit immediate is sign-extended arithmetically divided to the contents of GPR rs<sub>1</sub> to form a 32-bit two's complement result, which is then placed into GPR rd."},
    {name: 'J',      type: 'J', syntax: 'J name',                   description: "<center>PC &larr;<sub>32</sub> {[ (PC) + 4 ] + [ ( name<sub>0</sub> )<sup>16</sup> || name ]}</center><br/>The 26-bit name is sign-extended and added to the address of the instruction in the delay slot to form a 32-bit target address. This target address is unconditionally placed into the program counter."},
    {name: 'JAL',    type: 'J', syntax: 'JAL name',                 description: "<center>R31 &larr;<sub>32</sub> [ (PC) + 8 ]<br/>PC &larr;<sub>32</sub> {[ (PC) + 4 ] + [ ( name<sub>0</sub> )<sup>16</sup> || name ]}</center><br/>The 26-bit name is sign-extended and added to the address of the instruction in the delay slot to form a 32-bit target address. This target address is unconditionally placed into the program counter. The address of the instruction after the delay slot is placed into GPR R31."},
    {name: 'JALR',   type: 'I', syntax: 'JALR rs1',                 description: "<center>R31 &larr;<sub>32</sub> [ (PC) + 8 ]<br/>PC &larr;<sub>32</sub> ( rs<sub>1</sub> )</center><br/>The contents of GPR rs<sub>1</sub> are considered to be target address, and they are unconditionally placed into the program counter. The address of the instruction after the delay slot is placed into GPR R31."},
    {name: 'JR',     type: 'I', syntax: 'JR rs1',                   description: "<center>PC &larr;<sub>32</sub> ( rs<sub>1</sub> )</center><br/>The contents of GPR rs<sub>1</sub> are considered to be target address, and they are unconditionally placed into the program counter."},
    {name: 'LB',     type: 'I', syntax: '', description: ""},
    {name: 'LBU',    type: 'I', syntax: '', description: ""},
    {name: 'LH',     type: 'I', syntax: '', description: ""},
    {name: 'LHI',    type: 'I', syntax: '', description: ""},
    {name: 'LHU',    type: 'I', syntax: '', description: ""},
    {name: 'LW',     type: 'I', syntax: '', description: ""},
    {name: 'MOVI2S', type: 'I', syntax: '', description: ""},
    {name: 'MOVS2I', type: 'I', syntax: '', description: ""},
    {name: 'MULT',   type: 'I', syntax: '', description: ""},
    {name: 'MULTI',  type: 'I', syntax: '', description: ""},
    {name: 'NOP',    type: 'I', syntax: '', description: ""},
    {name: 'OR',     type: 'I', syntax: '', description: ""},
    {name: 'ORI',    type: 'I', syntax: '', description: ""},
    {name: 'RFE',    type: 'I', syntax: '', description: ""},
    {name: 'SB',     type: 'I', syntax: '', description: ""},
    {name: 'SEQ',    type: 'I', syntax: '', description: ""},
    {name: 'SEQI',   type: 'I', syntax: '', description: ""},
    {name: 'SGE',    type: 'I', syntax: '', description: ""},
    {name: 'SGEI',   type: 'I', syntax: '', description: ""},
    {name: 'SGT',    type: 'I', syntax: '', description: ""},
    {name: 'SGTI',   type: 'I', syntax: '', description: ""},
    {name: 'SH',     type: 'I', syntax: '', description: ""},
    {name: 'SLE',    type: 'I', syntax: '', description: ""},
    {name: 'SLEI',   type: 'I', syntax: '', description: ""},
    {name: 'SLL',    type: 'I', syntax: '', description: ""},
    {name: 'SLLI',   type: 'I', syntax: '', description: ""},
    {name: 'SLT',    type: 'I', syntax: '', description: ""},
    {name: 'SLTI',   type: 'I', syntax: '', description: ""},
    {name: 'SNE',    type: 'I', syntax: '', description: ""},
    {name: 'SNEI',   type: 'I', syntax: '', description: ""},
    {name: 'SRA',    type: 'I', syntax: '', description: ""},
    {name: 'SRAI',   type: 'I', syntax: '', description: ""},
    {name: 'SRL',    type: 'I', syntax: '', description: ""},
    {name: 'SRLI',   type: 'I', syntax: '', description: ""},
    {name: 'SUB',    type: 'I', syntax: '', description: ""},
    {name: 'SUBI',   type: 'I', syntax: '', description: ""},
    {name: 'SUBU',   type: 'I', syntax: '', description: ""},
    {name: 'SUBUI',  type: 'I', syntax: '', description: ""},
    {name: 'SW',     type: 'I', syntax: '', description: ""},
    {name: 'TRAP',   type: 'I', syntax: '', description: ""},
    {name: 'XOR',    type: 'I', syntax: '', description: ""},
    {name: 'XORI',   type: 'I', syntax: '', description: ""},
]
